// 2 ms. 92.26%
class Solution {
    private int dfs(int[][] graph, int u, boolean[] visited, boolean[] infected) {
        if(infected[u]) return 0;
        visited[u] = true;
        int count = 1;
        for(int v = 0; v < graph[u].length; v++) {
            if(!visited[v] && graph[u][v] == 1) {
                int c = dfs(graph, v, visited, infected);
                if(c == 0) {
                    infected[u] = true;
                    return 0;
                }
                count += c;
            }
        }
        return count;
    }
    public int minMalwareSpread(int[][] graph, int[] initial) {
        int n = graph.length, ans = initial[0], max = 0;
        boolean[] infected = new boolean[n];
        for(int u: initial) infected[u] = true;
        for(int u: initial) {
            boolean[] visited = new boolean[n];
            visited[u] = true;
            int count = 0;
            for(int i = 0; i < n; i++) {
                if(!visited[i] && graph[u][i] == 1) {
                    count += dfs(graph, i, visited, infected);
                }
            }
            if(count > max || count == max && u < ans) {
                max = count;
                ans = u;
            }
        }
        return ans;
    }
}